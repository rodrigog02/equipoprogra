import Adafruit_DHT
ğŸ“Œ Importa la librerÃ­a de Adafruit para usar sensores DHT11/DHT22. Esta librerÃ­a ya tiene funciones listas para comunicarte con el sensor.

import time
ğŸ“Œ Importa el mÃ³dulo time para poder usar sleep, que permite hacer pausas entre lecturas (por ejemplo, 2 segundos).

sensor = Adafruit_DHT.DHT22
ğŸ“Œ Indica el tipo de sensor que estÃ¡s usando.
Si tienes un DHT11, cambia esta lÃ­nea a:

sensor = Adafruit_DHT.DHT11
pin = 4
ğŸ“Œ Define el nÃºmero del pin GPIO (en este caso, GPIO4) al que conectaste el cable de datos del sensor.
Este no es el nÃºmero del pin fÃ­sico, sino el nÃºmero GPIO lÃ³gico de la Raspberry.

print("Iniciando lectura del sensor DHT...")
ğŸ“Œ Muestra un mensaje inicial para indicar que comienza el proceso.

while True:
ğŸ“Œ Inicia un bucle infinito: el cÃ³digo dentro de este bloque se repetirÃ¡ una y otra vez.

    humedad, temperatura = Adafruit_DHT.read_retry(sensor, pin)
ğŸ“Œ Esta es la funciÃ³n mÃ¡s importante:

read_retry() intenta leer los datos del sensor hasta 15 veces automÃ¡ticamente si falla al principio.

Devuelve dos valores:

humedad â†’ porcentaje de humedad relativa (%)

temperatura â†’ grados Celsius (Â°C)

    if humedad is not None and temperatura is not None:
ğŸ“Œ Verifica si la lectura fue exitosa. Si ambos valores no son None, significa que la lectura fue correcta.


        print(f"Temperatura: {temperatura:.1f} Â°C")
        print(f"Humedad: {humedad:.1f} %")
ğŸ“Œ Imprime los valores de temperatura y humedad.

:.1f significa que se muestra solo un decimal (ej: 23.4 Â°C).

    else:
        print("Fallo al leer datos del sensor. Intentando de nuevo...")
ğŸ“Œ Si la lectura fallÃ³ (uno o ambos valores son None), se imprime un mensaje de error.

    time.sleep(2)
ğŸ“Œ Espera 2 segundos antes de hacer otra lectura, para no saturar el sensor.
